<div id="main-content">
<div class="wikipage searchable">
  <h1 id="VisitorCounter">Visitor Counter
  </h1>
  <p>
  </p>
  <h2 id="Introduction">Introduction
  </h2>
  <p> Plugins are bundled in Riassence Framework. This means that the basic structure of a plugin is the same in every one. More information about the bundling can be found later from the documentation. This tutorial will however introduce the basic structure of plugins.
  </p>
  <pre class="wiki">|-plugin.rb        #The server side code written in Ruby
|-js/              #UI code resides here
|-- plugin.js      #UI code written in Javascript
</pre>
  <p> Ruby is used in the server side logic. More information about the Riassence Framework can be found from <a href="http://rsence.org/trac/wiki/Introduction">here</a>. Javascript is used to create user interface. Values between JS and Ruby can be synchronized automatically, but JS is used solely for user interface purposes.
  </p>
  <p> On this example we will build a plugin which counts page loads.
  </p>
  <h2 id="Step1">Step 1
  </h2>
  <p>First let's make an empty plugin, which doesn't do anything by itself. This will however show the bare minimum which a plugin needs:
  </p>
  <div class="code">
    <pre><span class="c1"># basic Plugin class extension</span>
<span class="k">class</span> <span class="nc">Counter</span> <span class="o">&lt;</span> <span class="no">Plugin</span>
<span class="c1"># nothing here yet!</span>
<span class="k">end</span>
<span class="c1"># registers Counter as 'counter'</span>
<span class="no">Counter</span><span class="o">.</span>new<span class="o">.</span>register<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>
</pre>
  </div>
  <p>This will register the PluginManager class. From now on you can access the data of this plugin instance with the name you provide:
  </p>
  <pre class="wiki">Counter.new.register( 'counter' )
</pre>
  <p> In this case the name will be 'counter'
  </p>
  <h2 id="Step2">Step 2
  </h2>
  <p> There are multiple methods to extend in a plugin class. Let's add support for bunch of methods to get some functionality:
  </p>
  <div class="code">
    <pre><span class="c1"># basic Plugin class extension</span>
<span class="k">class</span> <span class="nc">Counter</span> <span class="o">&lt;</span> <span class="no">Plugin</span>
<span class="c1"># primary initialization routine of the whole plugin, runs only once.</span>
  <span class="k">def</span> <span class="nf">init</span>

  <span class="k">end</span>

<span class="c1"># session initialization, whenever a new client is detected this method will be invoked</span>
  <span class="k">def</span> <span class="nf">init_ses</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>

<span class="c1"># restore session will be invoked when an old session in client is detected</span>
  <span class="k">def</span> <span class="nf">restore_ses</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>

<span class="c1"># runs every time during the synchronization (every time the server talks with the client)</span>
  <span class="k">def</span> <span class="nf">idle</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>

<span class="c1"># invoked once per page load when the framework has been initialized</span>
  <span class="k">def</span> <span class="nf">init_ui</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>

<span class="k">end</span>
<span class="c1"># registers Counter as 'counter'</span>
<span class="no">Counter</span><span class="o">.</span>new<span class="o">.</span>register<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>
</pre>
  </div>
  <p>This will add support for plugin initialization, session management, idle processes and user interface. This is sufficient for the visitor counter. Check the source code of Plugin for complete set of methods which can be extended.
  </p>
  <h2 id="Step3">Step 3
  </h2>
  <p>Let's begin building the class by adding one instance variable. @visits_total will tell the absolute number of visitors on the page.
  </p>
  <div class="code">
    <pre><span class="c1"># basic Plugin class extension</span>
<span class="k">class</span> <span class="nc">Counter</span> <span class="o">&lt;</span> <span class="no">Plugin</span>
  <span class="c1"># primary initialization routine of the whole plugin, runs only once.</span>
  <span class="k">def</span> <span class="nf">init</span>
    <span class="c1">#total number of visits on the page</span>
    <span class="vi">@visits_total</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">end</span>

  <span class="c1"># session initialization, whenever a new client is detected this method will be invoked</span>
  <span class="k">def</span> <span class="nf">init_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># add one to total visits</span>
    msg<span class="o">.</span>console<span class="p">(</span><span class="s2">"Hello, this is your first visit!"</span><span class="p">)</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">end</span>

  <span class="c1"># restore session will be invoked when an old session in client is detected</span>
  <span class="k">def</span> <span class="nf">restore_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1">#add one to total visits</span>
    msg<span class="o">.</span>console<span class="p">(</span><span class="s2">"Welcome back, this is visit number </span><span class="si">#{</span><span class="vi">@visits_total</span><span class="si">}</span><span class="s2">!"</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

  <span class="k">end</span>

  <span class="c1"># runs every time during the synchronization (every time the server talks with the client)</span>
  <span class="k">def</span> <span class="nf">idle</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>

  <span class="c1"># invoked once per page load when the framework has been initialized</span>
  <span class="k">def</span> <span class="nf">init_ui</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>
<span class="k">end</span>
<span class="c1"># registers Counter as 'counter'</span>
<span class="no">Counter</span><span class="o">.</span>new<span class="o">.</span>register<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>
</pre>
  </div>
  <p> Counting visitors can be easily done be extending the methods <tt> init_ses( msg ) </tt> and <tt>restore_ses( msg )</tt>. These methods will be executed automatically upon the client connection. Another trick worth to note is that you can easily send information, for example for debugging purposes, by using <tt> msg.console( String ) </tt> notation. This will send a message directly to the browser's console. Firebug is a cool debugging tool you'll want to install with Firefox if you don't have it already.
  </p>
  <h2 id="Step4">Step 4
  </h2>
  <p> Some further additions will follow. Let's add
  </p>
  <div class="code">
    <pre><span class="c1"># basic Plugin class extension</span>
<span class="k">class</span> <span class="nc">Counter</span> <span class="o">&lt;</span> <span class="no">Plugin</span>
  <span class="c1"># primary initialization routine of the whole plugin, runs only once.</span>
  <span class="k">def</span> <span class="nf">init</span>
    <span class="c1"># total hits are recorded as instance variable</span>
    <span class="vi">@hits_total</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># so are visits, both unique and all visits</span>
    <span class="vi">@visits_total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="vi">@visits_unique</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">end</span>

  <span class="c1"># session initialization, whenever a new client is detected this method will be invoked</span>
  <span class="k">def</span> <span class="nf">init_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># unique visit as the init_ses is called so let's add one for total and unique visit counters</span>
    <span class="vi">@visits_unique</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># this is really important development tool and will </span>
    <span class="c1"># send a message into web browser's console, check from your Firebug for example</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Welcome, user! Your Session ID is </span><span class="si">#{</span>msg<span class="o">.</span>ses_id<span class="si">}</span><span class="s2">. This is your first visit."</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># restore session will be invoked when an old session in client is detected</span>
  <span class="k">def</span> <span class="nf">restore_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1">#add one to total visits</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># send a happy message to the browser's console</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Welcome back, user! This is visit number </span><span class="si">#{</span><span class="vi">@visits_total</span><span class="si">}</span><span class="s2">!"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># runs every time during the synchronization (every time the server talks with the client)</span>
  <span class="k">def</span> <span class="nf">idle</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># let's add one to the hit counter as a message to server is </span>
    <span class="c1"># delivered even though only idle method is called</span>
    <span class="vi">@hits_total</span> <span class="o">+=</span> <span class="mi">1</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Hit count: </span><span class="si">#{</span><span class="vi">@hits_total</span><span class="si">}</span><span class="s2">"</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># invoked once per page load when the framework has been initialized</span>
  <span class="k">def</span> <span class="nf">init_ui</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>
<span class="k">end</span>
<span class="c1"># registers Counter as 'counter'</span>
<span class="no">Counter</span><span class="o">.</span>new<span class="o">.</span>register<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>

</pre>
  </div>
  <p>We added two more variables recording total hits and unique visits. Unique visits are easily distinguished as they can be added only when <tt> init_ses( msg ) </tt> is loaded. This means that the client initializes everything from the beginning and starts a new session. This can be estimated to a new client on this example. The Riassence Framework uses cookies to detect the old session. Total hits is attached to the <tt> idle(msg) </tt>. This means that the increment is done whenever client polls the server (with specified intervals) and idle method is run. The package is sent between server and the client whenever the client contacts the server.
  </p>
  <p> The Message object instance msg is supplied as an parameter and contains all required request/response and session related data as well as the primary server-side API for communicating with the client and other plugins. For example here session id can be extracted from the <tt>msg</tt> with <tt>msg.ses_id</tt>. More about <tt>msg</tt>s later.
  </p>
  <h2 id="Step5">Step 5
  </h2>
  <p> Let's add a session variable, which records the page loads per session.
  </p>
  <div class="code">
    <pre><span class="c1"># basic Plugin class extension</span>
<span class="k">class</span> <span class="nc">Counter</span> <span class="o">&lt;</span> <span class="no">Plugin</span>
  <span class="c1"># primary initialization routine of the whole plugin, runs only once</span>
  <span class="k">def</span> <span class="nf">init</span>
    <span class="c1"># total hits are recorded with plugin wide scope</span>
    <span class="vi">@hits_total</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># so are visits, both unique and all visits</span>
    <span class="vi">@visits_total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="vi">@visits_unique</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">end</span>

  <span class="c1"># session initialization, whenever a new client is detected this method will be invoked</span>
  <span class="k">def</span> <span class="nf">init_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># unique visit as the init_ses is called so let's add one for total and unique visit counters</span>
    <span class="vi">@visits_unique</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># initialization of the session </span>
    <span class="c1"># let's add counter for that we can keep track of how many visits </span>
    <span class="c1"># this particular session (== client) has had to the site</span>
    msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
      <span class="c1"># defined as numeral in a hash for the key (symbol) :visits</span>
      <span class="ss">:visits</span> <span class="o">=&gt;</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="c1"># this is really important development tool and will </span>
    <span class="c1"># send a message into web browser's console, check from your Firebug for example</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Welcome, user! Your Session ID is </span><span class="si">#{</span>msg<span class="o">.</span>ses_id<span class="si">}</span><span class="s2">. This is your first visit."</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># restore session will be invoked when an old session in client is detected</span>
  <span class="k">def</span> <span class="nf">restore_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1">#add one to total visits</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># add one as well to client's session specific counter (each client has its own counter)</span>
    msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">][</span><span class="ss">:visits</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># send a happy message to the browser's console</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Welcome back, user! This is your </span><span class="si">#{</span>msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">][</span><span class="ss">:visits</span><span class="o">]</span><span class="si">}</span><span class="s2">. visit!"</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># runs every time during the synchronization (every time the server talks with the client)</span>
  <span class="k">def</span> <span class="nf">idle</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># let's add one to the hit counter as a message to server is </span>
    <span class="c1"># delivered even though only idle method is called</span>
    <span class="vi">@hits_total</span> <span class="o">+=</span> <span class="mi">1</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Hit count: </span><span class="si">#{</span><span class="vi">@hits_total</span><span class="si">}</span><span class="s2">"</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># invoked once per page load when the framework has been initialized</span>
  <span class="k">def</span> <span class="nf">init_ui</span><span class="p">(</span> msg <span class="p">)</span>

  <span class="k">end</span>
<span class="k">end</span>
<span class="c1"># registers Counter as 'counter'</span>
<span class="no">Counter</span><span class="o">.</span>new<span class="o">.</span>register<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>

</pre>
  </div>
  <p> The session variables are stored in a hash. They can be easily accessed with symbols, such as :visits.
  </p>
  <h2 id="Step6">Step 6
  </h2>
  <p> The last step is to add UI. The UI is created with javascript file stored in the 'js' directory on the plugin bundle. Ruby code first:
  </p>
  <div class="code">
    <pre><span class="c1"># basic Plugin class extension</span>
<span class="k">class</span> <span class="nc">Counter</span> <span class="o">&lt;</span> <span class="no">Plugin</span>
  <span class="c1"># primary initialization routine of the whole plugin, runs only once</span>
  <span class="k">def</span> <span class="nf">init</span>
    <span class="c1"># total hits are recorded with plugin wide scope</span>
    <span class="vi">@hits_total</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># so are visits, both unique and all visits</span>
    <span class="vi">@visits_total</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="vi">@visits_unique</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">end</span>

  <span class="c1"># session initialization, whenever a new client is detected this method will be invoked</span>
  <span class="k">def</span> <span class="nf">init_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># unique visit as the init_ses is called so let's add one for total and unique visit counters</span>
    <span class="vi">@visits_unique</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># initialization of the session </span>
    <span class="c1"># let's add counter for that we can keep track of how many visits </span>
    <span class="c1"># this particular session (== client) has had to the site</span>
    msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span>
      <span class="c1"># defined as numeral in a hash for the key (symbol) :visits</span>
      <span class="ss">:visits</span> <span class="o">=&gt;</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="c1"># this is really important development tool and will </span>
    <span class="c1"># send a message into web browser's console, check from your Firebug for example</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Welcome, user! Your Session ID is </span><span class="si">#{</span>msg<span class="o">.</span>ses_id<span class="si">}</span><span class="s2">. This is your first visit."</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># restore session will be invoked when an old session in client is detected</span>
  <span class="k">def</span> <span class="nf">restore_ses</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1">#add one to total visits</span>
    <span class="vi">@visits_total</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># add one as well to client's session specific counter (each client has its own counter)</span>
    msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">][</span><span class="ss">:visits</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="c1"># send a happy message to the browser's console</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Welcome back, user! This is your </span><span class="si">#{</span>msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">][</span><span class="ss">:visits</span><span class="o">]</span><span class="si">}</span><span class="s2">. visit!"</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># runs every time during the synchronization (every time the server talks with the client)</span>
  <span class="k">def</span> <span class="nf">idle</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># let's add one to the hit counter as a message to server is </span>
    <span class="c1"># delivered even though only idle method is called</span>
    <span class="vi">@hits_total</span> <span class="o">+=</span> <span class="mi">1</span>
    msg<span class="o">.</span>console<span class="p">(</span> <span class="s2">"Hit count: </span><span class="si">#{</span><span class="vi">@hits_total</span><span class="si">}</span><span class="s2">"</span> <span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># invoked once per page load when the framework has been initialized</span>
  <span class="k">def</span> <span class="nf">init_ui</span><span class="p">(</span> msg <span class="p">)</span>
    <span class="c1"># grab the session with 'counter' (registered as 'counter')</span>
    ses <span class="o">=</span> msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">]</span>
    <span class="c1"># send the basic libraries, controls (HControl, HView etc. and the default theme for controls)</span>
    include_js<span class="p">(</span> msg<span class="p">,</span> <span class="o">[</span><span class="s1">'controls'</span><span class="p">,</span><span class="s1">'default_theme'</span><span class="o">]</span> <span class="p">)</span>
    <span class="c1"># include js code from the plugin 'js/', in this case 'js/counter.js'</span>
    msg<span class="o">.</span>reply require_js<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>
    msg<span class="o">.</span>reply<span class="p">(</span><span class="s2">"counter1 = Counter.nu(</span><span class="si">#{</span>extract_hvalues_from_hash<span class="p">(</span>ses<span class="p">)</span><span class="si">}</span><span class="s2">);"</span><span class="p">)</span>
    msg<span class="o">.</span>reply<span class="p">(</span><span class="s2">"counter1.setTotalVisitors(</span><span class="se">\"</span><span class="si">#{</span><span class="vi">@visits_total</span><span class="si">}</span><span class="se">\"</span><span class="s2">);"</span><span class="p">)</span>
    msg<span class="o">.</span>reply<span class="p">(</span><span class="s2">"counter1.setTotalHits(</span><span class="se">\"</span><span class="si">#{</span><span class="vi">@hits_total</span><span class="si">}</span><span class="se">\"</span><span class="s2">);"</span><span class="p">)</span>
    msg<span class="o">.</span>reply<span class="p">(</span><span class="s2">"counter1.setSessionVisits(</span><span class="se">\"</span><span class="si">#{</span>msg<span class="o">.</span>session<span class="o">[</span><span class="s1">'counter'</span><span class="o">][</span><span class="ss">:visits</span><span class="o">]</span><span class="si">}</span><span class="se">\"</span><span class="s2">)"</span><span class="p">)</span>
    msg<span class="o">.</span>reply<span class="p">(</span><span class="s2">"counter1.setUniqueVisits(</span><span class="se">\"</span><span class="si">#{</span><span class="vi">@visits_unique</span><span class="si">}</span><span class="se">\"</span><span class="s2">);"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="c1"># registers Counter as 'counter'</span>
<span class="no">Counter</span><span class="o">.</span>new<span class="o">.</span>register<span class="p">(</span> <span class="s1">'counter'</span> <span class="p">)</span>
</pre>
  </div>
  <p> Javascript:
  </p>
  <div class="code">
    <pre>Counter = HApplication.extend({
  constructor: function(_values) {
    this.base();
    this.values = _values;
    this.drawSubviews();
  },

  drawSubviews: function() {
    counterWin = HWindow.nu([50,50,550,350],this,{
      label: "Counter Window"
    });
    this.total = HStringView.nu([5,5,300,30], counterWin, {
      value: "Total visitors: not defined"
    });
    this.hits = HStringView.nu([5,40,300,30], counterWin, {
      value: "Total hits: not defined"
    });
    this.visits = HStringView.nu([5,75,300,30], counterWin, {
      value: "Session visits: not defined"
    });
    this.unique = HStringView.nu([5,110,300,30], counterWin, {
      value: "Unique visits: not defined"
    });
  },

  setTotalVisitors: function(value) {
    this.total.setValue("Total visitors " + value);
  },
  setTotalHits: function(value) {
    this.hits.setValue("Total hits " + value);
  },
  setSessionVisits: function(value) {
    this.visits.setValue("Session visits " + value);
  },
  setUniqueVisits: function(value) {
    this.unique.setValue("Unique visits: " + value);
  }

});
</pre>
  </div>
</div>
</div><ul Class="menu-goes-here"><li Class="booki-section">INTRODUCTION</li><li><a href="/riassence-framework/index">INTRODUCTION</a></li>
<li Class="booki-section">INSTALLATION</li><li><a href="/riassence-framework/ch003_installation">INSTALLATION</a></li>
<li><a href="/riassence-framework/ch004_configuration">CONFIGURATION</a></li>
<li><a href="/riassence-framework/ch005_troubleshooting">TROUBLESHOOTING</a></li>
<li Class="booki-section">TUTORIAL</li><li><a href="/riassence-framework/ch007_tutorial">TUTORIAL</a></li>
<li Class="booki-section">PROGRAMMING LANGUAGES</li><li><a href="/riassence-framework/ch009_ruby-basics">RUBY BASICS</a></li>
<li><a href="/riassence-framework/ch010_javascript-basics">JAVASCRIPT BASICS</a></li>
<li><a href="/riassence-framework/ch011_yaml-basics">YAML BASICS</a></li>
<li Class="booki-section">TUTORIALS</li><li><a href="/riassence-framework/ch013_visitor-counter">VISITOR COUNTER</a></li>
<li Class="booki-section">PLUGINS</li><li><a href="/riassence-framework/ch015_server-plugin-model">SERVER PLUGIN MODEL</a></li>
<li><a href="/riassence-framework/ch016_programming-plugins">PROGRAMMING PLUGINS</a></li>
<li Class="booki-section">CLIENT</li><li><a href="/riassence-framework/ch018_client-framework">CLIENT FRAMEWORK</a></li>
<li><a href="/riassence-framework/ch019_client-themes">CLIENT THEMES</a></li>
<li Class="booki-section">DATA MODELS</li><li><a href="/riassence-framework/ch021_data-models">DATA MODELS</a></li>
<li Class="booki-section">SERVLETS</li><li><a href="/riassence-framework/ch023_programming-servlets">PROGRAMMING SERVLETS</a></li>
<li Class="booki-section">SOAP</li><li><a href="/riassence-framework/ch025_programming-soap">PROGRAMMING SOAP</a></li>
<li Class="booki-section">USER INTERFACE</li><li><a href="/riassence-framework/ch027_using-gui">USING GUI</a></li>
<li><a href="/riassence-framework/ch028_user-interface-model">USER INTERFACE MODEL</a></li>
<li><a href="/riassence-framework/ch029_user-interface-programming">USER INTERFACE PROGRAMMING</a></li>
<li Class="booki-section">INTEGRATION</li><li><a href="/riassence-framework/ch031_integration-examples">INTEGRATION EXAMPLES</a></li>
<li Class="booki-section">CREDITS</li><li><a href="/riassence-framework/ch033_credits">CREDITS</a></li>
</ul>
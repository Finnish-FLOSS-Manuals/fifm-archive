<div id="main-content"><h1><span id="result_box" class="long_text" lang="en"><span>Vinkkejä</span></span></h1>
<p><span id="result_box" class="long_text" lang="en"><span>Tässä luvussa on joukko ratkaisuja yleisiin ongelmiin, jotta voit välttää tietyt perusvirheet. Lisäksi tarjolla on koodinpätkiä, joita voit käyttää omissa ohjelmissasi. </span></span></p>
<h2><span id="result_box" class="long_text" lang="en"><span>Muistin lisääminen </span></span></h2>
<p><span id="result_box" class="long_text" lang="en"><span> <br></span><span>Jos ohjelmasi käyttää videota, useita kuvia tai käsittelee suuria tietomääriä, ohjelmasi voi antaa muisti lopussa -virheviestin. Tässä on Processingin virheviesti: </span></span></p>
<p><img title="erreurs_1" src="_booki/processing-1/static/erreurs_1-fi.png" alt="erreurs_1" width="600" height="31"></p>
<p><span id="result_box" class="long_text" lang="en"><span>Sinun täytyy avata Processingin asetukset (preferences) ja muuttaa ohjelmalle annetun muistin määrää. </span></span></p>
<p><img title="Memory" src="_booki/processing-1/static/Memory-fi.png" alt="Memory" width="377" height="37"></p>
<h2><span id="result_box" class="long_text" lang="en"><span>Käännä booleanin arvo (true / false) </span></span></h2>
<h2> </h2>
<p><span id="result_box" class="long_text" lang="en"><span> Tässä on mekanismi, joka kääntää booleanin true/false (tosi/epätosi) -arvon ilman if/then -testiä. Boolean-muuttuja käännetään laittamalla sen eteen huutomerkki. </span></span></p>
<pre>boolean julistaTieto;

void setup() {
  julistaTieto = false;
}

void draw() {
  background(0);
  // Jos tosi, näyttää tekstin
  if (julistaTieto) text("Tieto", 10, 20);
}

void keyPressed() {
   // Kääntää julistaTieto-booleanin arvon vastakohdakseen
   julistaTieto = ! julistaTieto;
}</pre>
<h2><span id="result_box" class="long_text" lang="en"><span>Aikamittari komennoilla frameRate (), FrameCount ja jakojäännös <br></span></span></h2>
<p>Jos tahdot tehdä jotain säännöllisin aikavälein, yksinkertaisin tapa on mitata kuvankäsittelyssä kulunutta aikaa komennoilla frameRate(), FrameCount ja % (jakojäännös). Näin voi käsitellä vain yhtä ajanjaksoa ohjelmassa.</p>
<p><span id="result_box" class="long_text" lang="en"><span> <br></span></span></p>
<ul><li><span id="result_box" class="long_text" lang="en"><span>Muuttuja FrameCount laskee, kuinka monta kertaa komentoa draw() on kutsuttu ohjelman alun jälkeen. </span></span></li>
<li><span id="result_box" class="long_text" lang="en"><span>FrameRate() asettaa taajuuden, jolla komentoa draw() kutsutaan sekunnissa (oletusarvoisesti 30 kertaa sekunnissa). <br></span></span></li>
<li><span id="result_box" class="long_text" lang="en"><span>Operaattori % (jakojäännös) palauttaa kahden numeron jakojäännöksen. 7%3 palauttaa jakojäännöksen 1 ja 8%2 palauttaa jakojäännöksen 0. </span></span></li>
</ul><p><span id="result_box" class="long_text" lang="en"><span> <br></span><span>Jos tahdot tehdä toiminnon kerran sekunnissa, tämä koodi tekee toiminnon aina kun komentojen FrameCount() ja FrameRate() jakojäännös on 0. Seuraavassa esimerkissä kuvan päivitystaajuus (frameRate) sekunnissa on 24. Jos kuvan päivityskertojen (frameCount) ja päivitystaajuuden jakojäännös on 0, muutetaan taustaväri (background) satunnaiseksi väriksi.</span></span></p>
<pre>color vari;

void setup() {
  vari = 0;
  frameRate(24);
}

void draw() {
  background(vari);
  if (frameCount % 24 == 0) {
     vari = (int) random(255);
  }
}
</pre>
<p><span id="result_box" class="long_text" lang="en"><span>Harjoitus: muokkaa koodia niin, että väri vaihtuu kolmen sekunnin välein. <br></span></span></p>
<h2><span id="result_box" class="long_text" lang="en"><span>Tee luokka aikamittari</span></span></h2>
<p> </p>
<p><span id="result_box" class="long_text" lang="en"><span>Aikamittaria käytetään tekemään toiminto säännöllisin väliajoin. Tämä esimerkki näyttää, kuinka luodaan aikamittari-objekti, joka suorittaa koodinpätkän tietyin aikavälein. Sen periaatteena on tallentaa aika, jona ohjelma suoritettiin viimeksi, ja laskea aina draw() -metodikutsujen määrä, jotta nähdään, onko taas aika suorittaa koodi. Käytämme metodia millis(), joka palauttaa millisekunteina ohjelman käynnistämisestä kuluneen ajan.  Tämä metodi antaa käsitellä useita aikavälejä samassa ohjelmassa ja toimii täsmällisesti, ajanjaksot eivät vaihtele, jos tietokone on kiireinen. <br></span><span> <br></span><span>Luokkamme koostuu näistä: <br></span></span></p>
<ul><li><span id="result_box" class="long_text" lang="en"><span>Aikaväli</span></span></li>
<li>Edellisestä aikamittarin kutsusta kulunut aika</li>
<li>Aikavälin saavuttamisen tarkastava toiminto </li>
</ul><p> </p>
<pre>class Aikamittari {
  int aikavali;
  int viime_aika;
  Aikamittari(int alku_aikavali) {
    aikavali = alku_aikavali;
    viime_aika = millis();
  }

  boolean tarkistaAikavali() {
    if (millis() &gt; viime_aika + aikavali) {
      viime_aika = millis();
      return true;
    } else {
      return false;
    }
  }
}
</pre>
<p><span id="result_box" class="long_text" lang="en"><span>Tässä metodi tarkistaAikavali() tarkastaa edellisestä suorituksesta kuluneen ajan. Se palauttaa joko arvon true (tosi) tai arvon false (epätosi). Tyypillisesti teemme tietyn toiminnon aina kellonlyömällä. </span><span> <br><br></span><span>Ohjelmassamme julistamme muuttujan, joka tallentaa aikamittarimme. Jokaisella draw() -komennon kutsulla kutumme metodia tarkistaAikavali() objektistamme Aikamittari. Jos tämä metodi palauttaa arvon tosi, näytämme satunnaisesti sijoitetun neliön ruudullamme. Aikajakso on tässä 100 millisekuntia. </span></span></p>
<pre>Aikamittari aikamittari;
void setup() {
  aikamittari = new Aikamittari(100);
}

void draw() {
  if (aikamittari.tarkistaAikavali()) {
    rect(random(0, width), random(0, height), 10, 10);
  }
}
</pre>
<h2><span id="result_box" class="long_text" lang="en"><span>Jäädytä draw () -komennon toistaminen </span></span></h2>
<p>Komentoa draw() kutsutaan silmukassa koko ohjelman ajan, mikäli emme nimenomaisesti käske ohjelmaa jättämään sitä suorittamatta. Tämän silmukan voi kuitenkin pysäyttää komennolla noLoop(). Komento loop() käynnistää silmukan uudelleen.</p>
<p>Seuraava esimerkki näyttää, kuinka voimme pysäyttää silmukan ja käynnistää sen uudelleen käyttäen S-näppäintä ja välilyöntiä. </p>
<pre>int position = 0;
int increment = 1;

void setup() {
}

void draw() {
  background(0);
  ellipse(50, position, 5, 5);
  // siirrämme sijaintia yhdellä pikselillä
  position += increment;
  // jos se koskettaa reunoja
  if (position &gt; height || position &lt; 0) {
   // käännämme siirron arvon 
   increment *= -1;
  }
}

void keyPressed() {
 if (key == ' ') {
  // silmukka toistetaan
  loop();
 }
 else if (key == 's' || key == 'S') {
  // pysäytämme silmukan
  noLoop();
 }
}
</pre>
<h2>Lopeta ohjelma</h2>
<h2> </h2>
<p><span id="result_box" class="long_text" lang="en"><span> Lopettaaksesi ohjelman koodista käyttäjän toiminnan sijaan, kutsu metodia exit(). <br></span></span></p>
<div id="gt-res-tools" class="g-section"> </div>
<pre>// Voit lisätä tämän koodin edelliseen esimerkkiin
else if (key == 'e' || key =='E') {
  exit(); // ohjelma lopetetaan
}</pre></div><ul Class="menu-goes-here"><li Class="booki-section">Esittely</li><li><a href="/processing-1/index">Johdanto</a></li>
<li><a href="/processing-1/ch002_esimerkkeja">Esimerkkejä</a></li>
<li><a href="/processing-1/ch003_asennus">Asennus</a></li>
<li Class="booki-section">Perusteet</li><li><a href="/processing-1/ch005_perusteet">Perusteet</a></li>
<li Class="booki-section">Suunnittelu</li><li><a href="/processing-1/ch007_suunnittelutila">Suunnittelutila</a></li>
<li><a href="/processing-1/ch008_muodot">Muodot</a></li>
<li><a href="/processing-1/ch009_varit">Värit</a></li>
<li Class="booki-section">Interaktiivisuus</li><li><a href="/processing-1/ch011_video">Video</a></li>
<li><a href="/processing-1/ch012_videon-tuominen">Videon tuominen</a></li>
<li><a href="/processing-1/ch013_mikrofoni">Mikrofoni</a></li>
<li><a href="/processing-1/ch014_hiiri">Hiiri</a></li>
<li><a href="/processing-1/ch015_nappaimisto">Näppäimistö</a></li>
<li><a href="/processing-1/ch016_tulostaminen">Tulostaminen</a></li>
<li Class="booki-section">Vienti</li><li><a href="/processing-1/ch018_verkkoon-vieminen">Verkkoon vieminen</a></li>
<li Class="booki-section">Animaatio</li><li><a href="/processing-1/ch020_aanet">Äänet</a></li>
<li><a href="/processing-1/ch021_monien-objektien-animointi">Monien objektien animointi</a></li>
<li><a href="/processing-1/ch022_objektien-animointi">Objektien animointi</a></li>
<li><a href="/processing-1/ch023_aikajana">Aikajana</a></li>
<li><a href="/processing-1/ch024_draw-metodi">Draw-metodi</a></li>
<li Class="booki-section">Ohjelmointi</li><li><a href="/processing-1/ch026_kommentit">Kommentit</a></li>
<li><a href="/processing-1/ch027_objektit">Objektit</a></li>
<li><a href="/processing-1/ch028_metodit">Metodit</a></li>
<li><a href="/processing-1/ch029_listat">Listat</a></li>
<li><a href="/processing-1/ch030_toistaminen">Toistaminen</a></li>
<li><a href="/processing-1/ch031_ehdot">Ehdot</a></li>
<li><a href="/processing-1/ch032_muuttujat">Muuttujat</a></li>
<li><a href="/processing-1/ch033_muutokset">Muutokset</a></li>
<li><a href="/processing-1/ch034_rajat">Rajat</a></li>
<li><a href="/processing-1/ch035_kuvat">Kuvat</a></li>
<li Class="booki-section">Kehittyneempi suunnittelu</li><li><a href="/processing-1/ch037_tekstit">Tekstit</a></li>
<li Class="booki-section">Liitteet</li><li><a href="/processing-1/ch039_vinkkeja">Vinkkejä</a></li>
<li><a href="/processing-1/ch040_yleisia-virheita">Yleisiä virheitä</a></li>
<li><a href="/processing-1/ch041_ulkoiset-kirjastot">Ulkoiset kirjastot</a></li>
<li><a href="/processing-1/ch042_dokumentaatio">Dokumentaatio</a></li>
<li><a href="/processing-1/ch043_arduino">Arduino</a></li>
<li><a href="/processing-1/ch044_tasta-oppaasta">Tästä oppaasta</a></li>
<li><a href="/processing-1/ch045_tekijat">Tekijät</a></li>
</ul>
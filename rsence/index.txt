<html xmlns="http://www.w3.org/1999/xhtml" dir="LTR"><head><title>Johdanto</title><link rel="icon" href="/static/fl2.ico" type="image/x-icon"><link rel="stylesheet" href="/static/templating_template_flossmanuals.css" type="text/css"><script type="text/javascript" src="/static/jquery.js"></script><script type="text/javascript" src="/static/templating_template_flossmanuals.js"></script></head><body>
<div id="home">
  <a href="/"><img src="/static/top_read_back.gif" border="0" alt=""></a>
</div>
<div id="index">
  <a href="/rsence/index" id="index-book-title"><div Class="book-title-goes-here">RSence</div></a>
  <ul Class="menu-goes-here"><li Class="booki-section">Johdanto</li><li><a href="/rsence/index">Johdanto</a></li>
<li Class="booki-section">Asennus</li><li><a href="/rsence/ch003_asennus">Asennus</a></li>
<li Class="booki-section">Perusteet</li><li><a href="/rsence/ch005_alustus">Alustus</a></li>
<li><a href="/rsence/ch006_tarkastaminen">Tarkastaminen</a></li>
<li><a href="/rsence/ch007_ajaminen">Ajaminen</a></li>
<li Class="booki-section">Ohjelmointi</li><li><a href="/rsence/ch009_ohjelmointi">Ohjelmointi</a></li>
<li><a href="/rsence/ch010_asiakaspuoli">Asiakaspuoli</a></li>
<li><a href="/rsence/ch011_palvelinpuoli">Palvelinpuoli</a></li>
<li Class="booki-section">Lähdekoodi</li><li><a href="/rsence/ch013_fiveryaml">fiver.yaml</a></li>
<li><a href="/rsence/ch014_fiverrb">fiver.rb</a></li>
<li><a href="/rsence/ch015_valuesyaml">values.yaml</a></li>
<li><a href="/rsence/ch016_client_pkgsyaml">client_pkgs.yaml</a></li>
<li><a href="/rsence/ch017_fiverjs">fiver.js</a></li>
<li><a href="/rsence/ch018_fivercss">fiver.css</a></li>
<li><a href="/rsence/ch019_fiverhtml">fiver.html</a></li>
<li Class="booki-section">Dokumentaatio</li><li><a href="/rsence/ch021_dokumentaatio">Dokumentaatio</a></li>
<li Class="booki-section">Tekijät</li><li><a href="/rsence/ch023_tekijat">Tekijät</a></li>
</ul></div>
<!--
<div id="pdf">
  <a href="something.pdf"><img class="non" src="/static/makepdf.gif" border="0" alt="" /></a>
  <a href="something"><img class="non" src="/static/viewprint.gif" border="0" alt="" /></a>
</div>
-->
<div id="main">
  <div class="navbar">
    <div class="arrow top left"><a href="#"><img src="/static/lefttext.png" height="20" alt=""></a></div>
    <div class="arrow top right"><a href="#"><img src="/static/righttext.png" height="20" alt=""></a></div>
  </div>

  <div class="ds-contentcontainer">
    <div id="main-content">
<h1>Johdanto
</h1>
<h2><img title="rsence_org_logo" alt="rsence_org_logo" src="_booki/rsence/static/RSence-rsence_org_logo-fi.gif" height="110" width="559"><br></h2>
<p>
</p>
<p>RSence on reaaliaikaisten www-selainsovellusten toteuttamiseen kehitetty "Web App" / "RIA (Rich Internet Application)" -ohjelmistokehys, jonka päätarkoitus on graafisten käyttöliittymien mahdollisimman tehokas ohjelmointi- ja käyttökokemus. RSenceä on jatkuvasti kehitetty vuodesta 2006 ja se saavutti version 2.1 joulukuussa 2010. Tällä hetkellä työn alla on versio 2.2.
  <br></p>
<p>RSence on julkaistu GNU GPL -lisenssillä, mikä tarkoittaa sitä, että RSencen avulla tehtyjen ohjelmien lähdekoodit tulee jakaa eteenpäin, jos jakaa itse sovellusta eteenpäin. RSenceen on kuitenkin mahdollista saada myös muita lisenssejä, jotka mahdollistavat ohjelmistokehyksen käytön paremmin suljettuihin ympäristöihin tai kaupallisiin tarkoituksiin.
</p>
<p>RSence koostuu palvelinpuolen ohjelmistokehyksestä, joka on toteutettu Ruby-ohjelmointikielellä sekä asikaspuolen ohjelmistokehyksessä, joka puolestaan on toteutettu käyttäen Javascriptiä. Asiakaspuolen ohjelmistokehys on käyttäjän kannalta olennaisin osa, joten palvelin on toteutettu varta vasten palvelemaan sellaisia tarpeita, mitä selain ei voi tai ei saa toteuttaa.
  <br></p>
<h2>Tausta ja RSencen tarkoitus
</h2>
<p>Perinteiset web-sovellukset käyttävät yleensä kiinteitä HTML-koodattuja, palvelimen tarjoamia näkymiä, joissa käyttöliittymätoiminnot rajoittuvat hyperlinkkien paineluun ja syötekenttiä sisältävien lomakkeiden lähettelyyn palvelimelle ja sieltä edelleen vastauksena saatujen kiinteiden näkymien näyttämiseen. Kaikki varsinainen sovelluslogiikka oli palvelimella. Kyseinen malli perustui www:n alkuaikojen oletukselle, jossa www-selaimen pääasiallinen tarkoituksena oli toimia hyperlinkitettyjen tekstidokumenttien selausohjelmana.
</p>
<p>Melko pian kävi kuitenkin ilmeiseksi, että selaimeen tarvittaisiin enemmän toiminnallisuutta, joten niihin lisättiin aluksi multimediaominaisuuksia, kuten kuvien ja äänten liittämiseen html-dokumentteihin. Koska sivujen lataaminen oli hidasta, sekä hitaiden internet-yhteyksien että hitaiden palvelimien vuoksi, kehitettiin myös useita eri tapoja suorittaa sovelluslogiikkaa itse selaimessa. Näitä ovat mm. selainlaajennukset, kuten Flash ja Java. Niillä voidaan liittää itse HTML-sivusta erillisiä laatikoita sovelluksille, mutta laajennukset täytyy asentaa koneelle, niihin liittyy monenlaisia ongelmia ja laajennukset täytyy toteuttaa joka käyttöjärjstelmälle ja arkkitehtuurille erikseen ja ovat kaikenlisäksi usein suljettuja ympäristöjä, mikä tarkoittaa sitä, ettei jokaista selainlaajennusta ole olemassa jokaiselle käyttöjärjestelmälle, vaan saatavuus on täysin laajennuksen kehittäneen yrityksen varassa.
  <br></p>
<p> Itse HTML-sivujen selainpuolen käsittelyyn kehitettiin Netscapen toimesta Livescript -niminen kieli, joka kuitenkin markkinointiosaston painostuksen vuoksi ristittiin Javascriptiksi. Sillä kuitenkaan ole mitään sidoksia Javaan nimeä lukuunottamatta. Javascriptista tuli nopeasti suosittu de-facto standardi selaimiin ja on nykyään maailman ehdottomasti saavutetuin ohjelmointikieli. Lähes jokaisessa tietokoneessa ja mobiililaitteessa on mahdollisuus ajaa Javascript-ohjelmia
</p>
<p>Javascriptiä käytettiin aluksi pääasiallisesti html-lomakkeiden syötekenttien tarkistukseen ja yksinkertaiseen html-dokumenttien manipulointiin, kuten mainoksien esittämiseen, valikkoihin ja erikoistehosteisiin. Tietokoneiden suorituskyky kuitenkin jatkoi kasvuaan ja selainten tarjoamat Javascriptin käytettävissä olevat ominaisuudet laajenivat jatkuvasti. 2000-luvun puolivälissä selaimissa alkoi olla jo hyvin monipuolisia ominaisuuksia. Selaimen ja palvelimen välisessa kommunikaatiossa yleistyi ns. "Ajax" -tiedonsiirtomenetelmä, joka mahdollisti aiempaa helpomman tavan siirtää tietoa palvelimen ja selaimen välillä ilman koko sivun uudelleenlataamista.
  <br></p>
<p>Vaikka selainten välillä itse Javascript-kieli itsessään on hyvin yhteensopiva, selainten toteuttamat rajapinnat vaihtelevat melko paljon, mikä vaikeuttaa sovellusten ohjelmointia, sillä sama sovellus voi toimia eri sovelluksissa eri tavoin tai pahimmillaan ei toimi ollenkaan joissain selaimissa. Käyttöliittymienkin ohjelmointi on erittäin haastavaa, sillä selaimet tarjoavat valmiina vain kaikkein yksinkertaisimmat rakennusosat.
</p>
<p>RSence on tehty helpottamaan selain-ohjelmien tekoa ja tekemään niiden käytöstä mukavampaa käyttäjälle. Se tarjoaa yhtenäisen ja erittäin korkean abstraktiotason (high level) sovellusten tekoon. Valtaosa eri selainten välisistä eroista on kokonaan piilossa, eikä kehittäjän tarvitse huomioida käytännössä ollenkaan selainten matalampien abstraktiotasojen (low level) ominaisuuksia. Sovellusten tekoon on valmiina laaja kirjo käyttöliittymäkomponentteja, joissa on valmista toiminnallisuutta ja helpot rajapinnat räätälöidä ja laajentaa niitä kehittäjän tarpeiden mukaisiksi. Komponentit näyttävät samankaltaisilta ja toimivat samalla tavalla kuin käyttäjät ovat tottuneet työpöytäohjelmissa. Niiden käyttö on kehittäjällekin samankaltaista kuin työpöytäohjelmia kehitettäessä.
</p>
<p>RSence-sovellusten käyttöliittymät ajetaan täysin selaimessa, eli asiakastietokoneella, mikä paitsi mahdollistaa paremman käyttökokemuksen käyttäjän kannalta, myös vapauttaa palvelimen resursseja. RSencellä voi siis toteuttaa aivan samalla tavalla toimivia sovelluksia kuin graafisissa käyttöjärjestelmissäkin. Merkittävä ero on kuitenkin se, että RSence-sovellukset toimivat Internetissä, joten mitään ei tarvitse asentaa asiakaskoneille ja sovellukset toimivat niin laite-, käyttöjärjestelmä-, kuin selainriippumattomasti. Kehittäjän ei tarvitse edes välttämättä osata JavaScriptiä, sillä ulkoasu ja siihen liittyvä toiminnallisuus voidaan kuvata kokonaan YAML-merkintäkielellä. Varsinaista Javascript-osaamista tarvitaan vain, jos halutaan muuttaa RSencen komponenttikirjaston osasia tai luoda uusia komponenttejä.
  <br></p>
<p>Pelkällä selaimella ei kuitenkaan voi tehdä ihan mitä tahansa. Selainsovelluksen käyttöoikeudet ovat hyvin tarkkaan rajoitettuja, sekä käyttäjän yksityisyyden, käyttöjärestelmän eheyden että tietoturvan suojaamiseksi. Selaimesta käsin ei esimerkiksi ole mahdollista käyttää tietokoneeseen kytkettyjä oheislaitteita, kuten tulostimia, skannereita ja kameroita. Niillä ei ole pääsyä kovalevyn sisältöön ja internet-kommunikaatiokin on tarkasti rajattu väärinkäytösten estämiseksi. Niillä voi kuitenkin käsitellä kaikkea mitä selainikkunassa on ja niillä voi kommunikoida esteettä saman palvelimen kanssa, jolta sovellus on alustettu. Se riittääkin hyvin pitkälle ja kaikkea muuta toiminnallisuutta varten on RSence-palvelin. Kun palvelimen ei tarvitse huolehtia raskaimmasta kuormasta, eli käyttöliittymästä, asiakkaita pystytään palvelemaan mahdollisimman nopeasti ja samalla mahdollisimman montaa asiakasta kerralla.
  <br></p>
<p>RSencen palvelin on kehitetty varta vasten RSencen selainsovellusten käyttöön, eli välittää käytettävän tiedon saumattomasti osapuolten välillä ja toteuttaa kaikkea muuta sellaista mitä selaimessa ei voi tehdä. Kun RSence-palvelimelle otetaan selaimella yhteyttä www-osoitteen kautta, palvelin lähettää selaimelle pyynnön ladata RSencen Javascript-ydin (core.js). Kun selain lataa ja suorittaa RSencen Javascript-ytimen, se ottaa välittömästi yhteyttä palvelimeen avaamalla tiedonsiirtokanavan. Ensimmäisellä yhteydellä toteutetaan kättely, jolla palvelimen ja selaimen välille muodostuu sidos tai palautetaan olemassaoleva sidos, eli istunto (sessio).
</p>
<p>Istunnon puitteissa hoidetaan siitä eteenpäin kaikki kommunikaatio palvelimen ja selaimen välillä. Seuraavaksi palvelin pyytää session puitteissa RSence-sovelluksia alustamaan käyttämänsä tieto-oliot (value objects; HValue) ja käyttöliittymät. Käyttöliittymän ja palvelimen välinen kommunikaatio tapahtuu tästä eteenpäin tieto-olioiden välityksellä. Itse tiedonsiirto on yhtä näkymätön ja saumaton tapahtuma käyttäjän kannalta kuin työpöytäsovelluksissa esimerkiksi sovelluksen tekemät toimenpiteet kovalevyllä. Tieto-olioita muokkaamalla välitetään myös kehittäjän kannalta näkymättömästi tapahtumat jokaiselle kutakin tietoa käyttävälle sovelluksen osaselle. Kehittäjän ei siis tarvitse nähdä ylimääräistä vaivaa välittääkseen tietoa, mikä on usein itse käyttöliittymän ohella vaivalloisimpia toimenpiteitä sovelluskehittäjälle.
  <br></p>Käytännössä tämä tarkoittaa sitä, että RSence huolehtii suurimmasta osasta sovelluskehityksen työläistä ja teknisesti haastavista osista. Kehittäjän tehtäväksi jää graafisen käyttöliittymän luominen YAML-merkintäkielellä tai javascriptillä, eikä kehittäjän tarvitse murehtia, toimiiko sovelluslaajennus eri selaimilla.
<br><p> RSencen arkkitehtuuri koostuu neljästä suuremmasta kokonaisuudesta. Selaimessa ajettava asiakaspuolen ohjelmistokehys koostuu käyttöliittymärajapinnasta (User Interface API) ja asiakasdatarajapinnasta (Client Data API).
</p>
<p>Palvelinpuolen ohjelmistokehys on jaettu myös kahteen kokonaisuuteen palvelimen taustajärjestelmään (Server Back-end) sekä palvelimen päälijärjestelmään (Server Front-end). Palvelinpuolen toiminnat on tehokkaasti sijoitettu rajapintojen taakse, joten kehittäessä RSence-sovelluslaajennuskia ei niiden toimintaan tarvitse puuttua.
</p>
<p>RSencen dokumentaatio ja erilaisia sovellusesimerkkejä löytyy osoitteesta <a href="http://rsence.org/">http://rsence.org</a>
</p>
<h2>Ruby-ohjelmointikieli
</h2>
<p>Koska RSencen palvelinpuolen ohjelmistokehys on toteutettu käyttäen Ruby-ohjelmointikieltä, esitellään tässä alaluvussa hieman Rubyn perusperiaatteita ja toiminnallisuutta.
</p>
<p>Ruby on tulkattava, dynaaminen ja dynaamisesti tyypittävä oliopohjainen ohjelmointikieli. Vaikka Ruby onkin tulkattava ohjelmointikieli (skriptikieli), on sillä mahdollista toteuttaa ohjelmia käyttöjärjestelmien alimmilta tasoilta aina graafisiin käyttöliittymiin. Ruby toimii kaikissa yleisimmissä käyttöjärjestelmissä ja JRuby – Rubyn Java-implementaatio myös kaikissa alustoissa, joihin on saatavilla Java-virtuaalikone.
</p>
<p>Klassinen ohjelmointiesimerkki ”Hei maailma” on Rubyllä toteutettuna seuraavanlainen:
  <br></p>
<pre>puts ”Hei maailma!”
</pre>
<p>RSencen palvelinsovelluksessa se ei ole kovin paljon monimutkaisempi, siinä määritellään vain sovelluksen tyyppi ja missä yhteydessä viesti tulostetaan:
  <br></p>
<pre>class HeiMaailma &lt; Plugin
  def open
    puts ”Hei maailma!”
  end
end
</pre>
<p>Yllä oleva ohjelma tulostaa selaimen konsoliin (tai rsence.stdout-logitiedostoon, asetuksista riippuen) tekstin <em>Hei maailma!</em>, kun sovellus on alustettu.
</p>
<p>Jos halutaan tulostaa teksti selaimen konsoliin, se tehdään seuraavasti:
</p>
<p>
</p>
<pre>class HeiMaailma &lt; Plugin
  def idle( msg )
    msg.console ”Hei maailma!”
  end
end
</pre>
<p>Yllä oleva ohjelma tulostaa selaimen konsoliin tekstin joka kerralla, kun istunnon tietoja synkronoidaan.
  <br></p>
<p>Rubyn dokumentaatio ja asennustiedostot ovat sivulla <a href="http://www.ruby-lang.org/en/">http://www.ruby-lang.org/en/</a>.
  <br></p>
<h2>Rubyn historia
</h2>
<p>Rubyn historia alkaa vuodesta 1993, kun japanilainen Yukihiro ”Matz” Matsumoto ei löytänyt olemassa olevista ohjelmointikielistä hänen mieltymyksiinsä sopivaa. Matsumoto halusi ohjelmointikielen, jossa yhdistyisi Perlin tehokkuus ja joka olisi enemmän olio-ohjelmointiin suuntautuva kuin Python. Koska kyseistä yhdistelmää ei vielä ollut olemassa, päätti Matsumoto luoda sen itse. Näin Ruby sai alkunsa. Rubyn esikuvina on toiminut Smalltalk, Python, LISP, Eiffel, Ada ja C++, joista Matsumoto on ottanut mukaan Rubyyn mielestään parhaat palat.
</p>
<p>Rubyn versio 1.0 julkaistiin joulukuun 25. päivä vuonna 1996 ja varsinainen maailmanvalloitus alkoi vuonna 1997, kun Rubyn virallinen verkkosivu avattiin myös englanninkielisenä. Tätä ennen Rubyn leviämistä oli hidastanut se, että Matsumato oli tehnyt Rubyn dokumentaation vain japaniksi. Todellinen läpimurto tapahtui, kun vuonna 2003 Rubyllä ohjelmoitu Ruby on Rails ilmestyi.
</p>
<h2>Rubygems
  <br></h2>
<p>RubyGems on Rubyn standardoitu pakkaus- ja asennusohjelmistokehys, jonka avulla voidaan laajentaa Rubyn toiminnallisuutta. RubyGems ei kuulu Rubyn perusasennukseen, joten se tulee itse asentaa osoitteesta <a href="http://rubygems.rubyforge.org">http://rubygems.rubyforge.org</a> löytyvien ohjeiden avulla. RubyGemsistä löytyy
  <br>lukuisia erilaisia laajennuksia, kuten tässä käyttöoppaassa tarkemmin esitelttävä RSence
</p>
<p> 
</p>
<p>
</p>
<p>
</p>
</div></div>

  <div class="navbar">
    <div class="arrow bottom left"><a href="#"><img src="/static/lefttext.png" height="20" alt=""></a></div>
    <div class="arrow bottom right"><a href="#"><img src="/static/righttext.png" height="20" alt=""></a></div>
  </div>
</div>


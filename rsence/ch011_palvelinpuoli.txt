<html xmlns="http://www.w3.org/1999/xhtml" dir="LTR"><head><title>Palvelinpuoli</title><link rel="icon" href="/static/fl2.ico" type="image/x-icon"><link rel="stylesheet" href="/static/templating_template_flossmanuals.css" type="text/css"><script type="text/javascript" src="/static/jquery.js"></script><script type="text/javascript" src="/static/templating_template_flossmanuals.js"></script></head><body>
<div id="home">
  <a href="/"><img src="/static/top_read_back.gif" border="0" alt=""></a>
</div>
<div id="index">
  <a href="/rsence/index" id="index-book-title"><div Class="book-title-goes-here">RSence</div></a>
  <ul Class="menu-goes-here"><li Class="booki-section">Johdanto</li><li><a href="/rsence/index">Johdanto</a></li>
<li Class="booki-section">Asennus</li><li><a href="/rsence/ch003_asennus">Asennus</a></li>
<li Class="booki-section">Perusteet</li><li><a href="/rsence/ch005_alustus">Alustus</a></li>
<li><a href="/rsence/ch006_tarkastaminen">Tarkastaminen</a></li>
<li><a href="/rsence/ch007_ajaminen">Ajaminen</a></li>
<li Class="booki-section">Ohjelmointi</li><li><a href="/rsence/ch009_ohjelmointi">Ohjelmointi</a></li>
<li><a href="/rsence/ch010_asiakaspuoli">Asiakaspuoli</a></li>
<li><a href="/rsence/ch011_palvelinpuoli">Palvelinpuoli</a></li>
<li Class="booki-section">Lähdekoodi</li><li><a href="/rsence/ch013_fiveryaml">fiver.yaml</a></li>
<li><a href="/rsence/ch014_fiverrb">fiver.rb</a></li>
<li><a href="/rsence/ch015_valuesyaml">values.yaml</a></li>
<li><a href="/rsence/ch016_client_pkgsyaml">client_pkgs.yaml</a></li>
<li><a href="/rsence/ch017_fiverjs">fiver.js</a></li>
<li><a href="/rsence/ch018_fivercss">fiver.css</a></li>
<li><a href="/rsence/ch019_fiverhtml">fiver.html</a></li>
<li Class="booki-section">Dokumentaatio</li><li><a href="/rsence/ch021_dokumentaatio">Dokumentaatio</a></li>
<li Class="booki-section">Tekijät</li><li><a href="/rsence/ch023_tekijat">Tekijät</a></li>
</ul></div>
<!--
<div id="pdf">
  <a href="something.pdf"><img class="non" src="/static/makepdf.gif" border="0" alt="" /></a>
  <a href="something"><img class="non" src="/static/viewprint.gif" border="0" alt="" /></a>
</div>
-->
<div id="main">
  <div class="navbar">
    <div class="arrow top left"><a href="#"><img src="/static/lefttext.png" height="20" alt=""></a></div>
    <div class="arrow top right"><a href="#"><img src="/static/righttext.png" height="20" alt=""></a></div>
  </div>

  <div class="ds-contentcontainer">
    <div id="main-content">
<h1>Palvelinpuolen logiikka
  <br></h1>
<p>Palvelinpuolen logiikkaa sijaitsee sovelluslaajennuksen juurihakemistossa. Se voidaan nimetä joko sovelluslaajennuksen nimen mukaan tai main.rb:ksi. Palvelinpuolen logiikkaa koostuu sovelluslaajennuksen omista metodeista sekä RSencen GUIPlugin-luokan metodeista. Jos sovelluslaajennus ei ole graafinen, se voidaan periyttää Plugin-luokasta.
</p>
<p>Kokonaisuudessaan fiver.rb:n lähdekoodi on luettavissa liitteessä. Seuraavaksi käydään alla tarkemmin läpi joitakin tärkeitä metodeja sekä kuriirin virkaa hoitava Message-luokka. Suurin osa metodeista lähdekoodissa on Fiver-pelin logiikkaan ja pisteiden laskuun liittyviä, eikä niitä käydä sen tarkemmin läpi lukuun ottamatta submit_ones-metodia.
</p>
<h2>RSence::Message-luokka
</h2>
<p> Message-instanssia käytettään ”kuriiriluokkana”, kun käsitellään asikaspuolen ja palvelinpuolen pyyntöjä. Se alustetaan järjestelmän toimesta, ja lyhytnimi instanssille on msg.
  <br></p>
<p>Message-luokan kautta käsitellään kaikkia asiakkaiden istuntoja (sessions). Koska RSence luo jokaisesta sovelluslaajennuksesta vain yhden instanssin, joka on siis kaikkien palvelimeen yhdistettyjen asiakkaiden käytössä, nousee istuntojen hallinta merkittävään rooliin. Jokaiselle asiakkaalle luodaan RSence-järjestelmässä oma istunto, jossa säilytetään kaikki asiakkaan tunnistustiedot sekä asiakkaaseen liittyvä data. Näin ollen esimerkiksi Fiver-sovelluslaajennuksessa kaikki pelaajan pisteet ja muut peliin liittyvä tieto on haettava aina aluksi msg-oliolta ja sitten tallennettava siihen.
  <br></p>
<p>Seuraavassa esimerkissä haetaan msg-oliosta istunto muuttujaan get_ses()-metodilla ja tämän jälkeen muutetaan istunnon muuttujan arvo numeroksi 1.
</p>
<pre>ses = get_ses( msg )
ses[:muuttuja].set(msg,1)
</pre>
<p>Muuttuja :muuttuja olisi tässä tapauksessa määritelty values.yaml-tiedostossa ja sidottu gui/ohjelma.yaml-tiedostossa ja näin ollen nähtävissä heti metodin läpikäynnin jälkeen selaimessa. Muuttuja yllä olevassa esimerkissä voi olla siis mikä tahansa komponentin lukuarvo tai merkkijono. Käytännön esimerkki aiheesta löytyy luvusta 5.3.3, jossa esitellään submit_ones()-metodi.
  <br></p>
<p>Aiemmin totesin, että huijaaminen ilman varokeinoja on triviaalia. Tämän johdosta jokaisen pelaajan istunnossa säilytetään osia tiedoista ”tuplana”, osa on tarkoitettu asiakkaalle näytettäväksi ja osa pidetään aina palvelimella. Esimerkiksi kun heitetään noppaa, tallennetaan tulos muuttujiin true_die_luku ja die_luku. Varsinaiset pisteiden laskemiset suoritetaan aina
  <br>true_muuttujilla, koska niitä ei ole voitu vääristellä.
</p>
<h2>Käytetyt palvelinpuolen metodit
  <br></h2>
<p>Fiver-sovelluslaajennuksessa on käytetty kolmea RSence-järjestelmän palvelinpuolen metodia: init_ses(), restore_ses() ja idle().
</p>
<pre>init_ses()</pre>
<p>init_ses() metodi käynnistetään automaattisesti, kun uusi asiakas on havaittu.
  <br></p>
<pre>restore_ses()</pre>
<p>restore_ses() metodi käynnistetään, kun havaitaan, että asiakkaalla on jo vanha istunto. Näin voitaisiin palauttaa vanha istunto. Fiversovelluslaajennuksessa uudelleenlataaminen johtaa pelin palaamisen aloitustilanteeseen.
  <br></p>
<pre>idle()</pre>
<p>idle() ajatetaan joka kerta, kun dataa synkronoidaan asiakkaan ja palvelimen välillä, tai joka kerta, kun asiakas ottaa yhteyden. Fiversovelluslaajennuksessa jokaisen idle()-ajon yhteydessä sijoitetaan palvelinpuolen varmennetut kokonaispisteet asiakaspuolen kokonaispisteisiin. Tämän
  <br>tarkoituksena on se, että kokonaispisteet näkyvät asiakkaalla aina oikeina, vaikka huijausta olisi yritetty.
</p>
<h2>submit_ones
</h2>
<p>Seuraavana esitelty yksi Fiver-sovelluslaajennuksen pisteenlaskumetodeista, metodin tehtävänä on laskea, kuinka monta nopista näyttää silmälukua yksi. Luvussa on käyty läpi, kuinka kyseinen metodi on sidottu graafiseen käyttöliittymään values.yaml-tiedostossa.
  <br></p>
<pre>def submit_ones(msg,value)</pre>
<p>Summan nollaus.
  <br></p>
<pre>ones = 0</pre>
<p>Haetaan muuttujaan ses istuntokohtaiset tiedot msg-oliosta:
</p>
<p>
</p>
<pre>ses = get_ses(msg)</pre>
<p>Tarkistetaan, että noppia on heitetty, eli ei yritetä antaa edellisen kierroksen
  <br>noppia pisteinä.
  <br></p>
<pre>if ses['true_roll_times'] != 0</pre>
<p>Tarkistetaan jokaisen nopan kohdalla, onko sen silmäluku yksi. Jos on, lisätään
  <br>luku summaan ones.
  <br></p>
<pre>if ses['true_die_one'] == 1
ones += ses['true_die_one']
end
if ses['true_die_two'] == 1
ones += ses['true_die_two']
end
if ses['true_die_three'] == 1
ones += ses['true_die_three']
end
if ses['true_die_four'] == 1
ones += ses['true_die_four']
end
if ses['true_die_five'] == 1
ones += ses['true_die_five']
end</pre>
<p>Nollataan noppien lukitukset sekä noppien luvut:
  <br></p>
<pre>reset_keeps(msg)
reset_dice(msg)</pre>
<p>Päivitetään pisteitä:
  <br></p>
<pre>update_upper_score(msg,ones)
ses[:ones].set(msg,ones)
else</pre>
<p>Jos noppia ei ole vielä heitetty, niin ei tehdä mitään:
</p>
<pre>ses[:submit_ones].set( msg, 0)
end
end
</pre>
</div></div>

  <div class="navbar">
    <div class="arrow bottom left"><a href="#"><img src="/static/lefttext.png" height="20" alt=""></a></div>
    <div class="arrow bottom right"><a href="#"><img src="/static/righttext.png" height="20" alt=""></a></div>
  </div>
</div>


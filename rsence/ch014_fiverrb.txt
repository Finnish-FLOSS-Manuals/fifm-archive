<html xmlns="http://www.w3.org/1999/xhtml" dir="LTR"><head><title>fiver.rb</title><link rel="icon" href="/static/fl2.ico" type="image/x-icon"><link rel="stylesheet" href="/static/templating_template_flossmanuals.css" type="text/css"><script type="text/javascript" src="/static/jquery.js"></script><script type="text/javascript" src="/static/templating_template_flossmanuals.js"></script></head><body>
<div id="home">
  <a href="/"><img src="/static/top_read_back.gif" border="0" alt=""></a>
</div>
<div id="index">
  <a href="/rsence/index" id="index-book-title"><div Class="book-title-goes-here">RSence</div></a>
  <ul Class="menu-goes-here"><li Class="booki-section">Johdanto</li><li><a href="/rsence/index">Johdanto</a></li>
<li Class="booki-section">Asennus</li><li><a href="/rsence/ch003_asennus">Asennus</a></li>
<li Class="booki-section">Perusteet</li><li><a href="/rsence/ch005_alustus">Alustus</a></li>
<li><a href="/rsence/ch006_tarkastaminen">Tarkastaminen</a></li>
<li><a href="/rsence/ch007_ajaminen">Ajaminen</a></li>
<li Class="booki-section">Ohjelmointi</li><li><a href="/rsence/ch009_ohjelmointi">Ohjelmointi</a></li>
<li><a href="/rsence/ch010_asiakaspuoli">Asiakaspuoli</a></li>
<li><a href="/rsence/ch011_palvelinpuoli">Palvelinpuoli</a></li>
<li Class="booki-section">Lähdekoodi</li><li><a href="/rsence/ch013_fiveryaml">fiver.yaml</a></li>
<li><a href="/rsence/ch014_fiverrb">fiver.rb</a></li>
<li><a href="/rsence/ch015_valuesyaml">values.yaml</a></li>
<li><a href="/rsence/ch016_client_pkgsyaml">client_pkgs.yaml</a></li>
<li><a href="/rsence/ch017_fiverjs">fiver.js</a></li>
<li><a href="/rsence/ch018_fivercss">fiver.css</a></li>
<li><a href="/rsence/ch019_fiverhtml">fiver.html</a></li>
<li Class="booki-section">Dokumentaatio</li><li><a href="/rsence/ch021_dokumentaatio">Dokumentaatio</a></li>
<li Class="booki-section">Tekijät</li><li><a href="/rsence/ch023_tekijat">Tekijät</a></li>
</ul></div>
<!--
<div id="pdf">
  <a href="something.pdf"><img class="non" src="/static/makepdf.gif" border="0" alt="" /></a>
  <a href="something"><img class="non" src="/static/viewprint.gif" border="0" alt="" /></a>
</div>
-->
<div id="main">
  <div class="navbar">
    <div class="arrow top left"><a href="#"><img src="/static/lefttext.png" height="20" alt=""></a></div>
    <div class="arrow top right"><a href="#"><img src="/static/righttext.png" height="20" alt=""></a></div>
  </div>

  <div class="ds-contentcontainer">
    <div id="main-content">
<h1>fiver.rb
</h1>
<pre>class Fiver &lt; GUIPlugin
# Session initialization, whenever a new client is detected this method will be invoked
def init_ses( msg )
super
ses = get_ses(msg)
ses['true_upper_score'] = 0
ses['true_bonus'] = 0
ses['true_bonus_set'] = 0
ses['true_total_upper_score'] = 0
ses['true_total_lower_score'] = 0
ses['true_grand_total'] = 0
ses['true_roll_times'] = 0
ses['true_die_one'] = 0
ses['true_die_two'] = 0
ses['true_die_three'] = 0
ses['true_die_four'] = 0
ses['true_die_five'] = 0
end
# Restore session will be invoked when an old session in client is detected
def restore_ses( msg )
super
ses = get_ses(msg)
ses['true_upper_score'] = 0
ses['true_bonus'] = 0
ses['true_bonus_set'] = 0
ses['true_total_upper_score'] = 0
ses['true_total_lower_score'] = 0
ses['true_grand_total'] = 0
ses['true_roll_times'] = 0
ses['true_die_one'] = 0
ses['true_die_two'] = 0
ses['true_die_three'] = 0
ses['true_die_four'] = 0
ses['true_die_five'] = 0
end
# Runs every time during the value synchronization (every time the client connects)
# Does not need super
# anti cheat routines could be implemented here, I will settle with grand_total
def idle( msg )
ses = get_ses( msg )
ses[:grand_total].set(msg,ses['true_grand_total'])
return true
end
def reset_game(msg,value)
ses = get_ses(msg)
#Resetting true variables
ses['true_upper_score'] = 0
ses['true_bonus'] = 0
ses['true_bonus_set'] = 0
ses['true_total_upper_score'] = 0
ses['true_total_lower_score'] = 0
ses['true_grand_total'] = 0
ses['true_roll_times'] = 0
ses['true_die_one'] = 0
ses['true_die_two'] = 0
ses['true_die_three'] = 0
ses['true_die_four'] = 0
ses['true_die_five'] = 0
ses.each do |key,value|
if value.respond_to? :value_id
ses[key ].set(msg,0)
end
end
return true
end
def update_upper_score(msg,score)
ses = get_ses(msg)
ses['true_upper_score'] += score
ses[:upper_score].set(msg,ses['true_upper_score'])
if ses['true_bonus_set'] == 0
ses['true_bonus'] = ses['true_upper_score'] &gt; 62 ? 50 : 0
ses['true_bonus_set'] = ses['true_bonus'] == 50 ? 1 : 0
score += ses['true_bonus']
end
ses[:bonus].set(msg,ses['true_bonus'])
ses['true_total_upper_score'] += score
ses[:total_upper_score].set(msg,ses['true_total_upper_score'])
ses['true_grand_total'] +=score
ses[:grand_total].set(msg,ses['true_grand_total'])
end
def update_lower_score(msg,score)
ses = get_ses(msg)
ses['true_total_lower_score'] += score
ses[:total_lower_score].set(msg,ses['true_total_lower_score'])
ses['true_grand_total'] +=score
ses[:grand_total].set(msg,ses['true_grand_total'])
end
#resets keep buttons after score is submitted
def reset_keeps(msg)
ses = get_ses(msg)
ses[:die_one_check].set(msg,0)
ses[:die_two_check].set(msg,0)
ses[:die_three_check].set(msg,0)
ses[:die_four_check].set(msg,0)
ses[:die_five_check].set(msg,0)
end
def die_check(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] == 0
reset_keeps(msg)
else
return true
end
end
#resets dice after score is submitted
def reset_dice(msg)
ses = get_ses(msg)
ses[:die_one].set( msg,"0")
ses[:die_two].set( msg,"0")
ses[:die_three].set( msg,"0")
ses[:die_four].set( msg,"0")
ses[:die_five].set( msg,"0")
ses['true_roll_times'] = 0
ses[:roll].set( msg, 0)
end
def roll(msg,value)
ses = get_ses( msg )
if ses['true_roll_times'] &lt;⁞= 2
#Roll each die which is not checked to be kept
if ses[:die_one_check].data() != true
ses['true_die_one'] = rand(6)+1
ses[:die_one].set( msg,ses['true_die_one'])
end
if ses[:die_two_check].data() != true
ses['true_die_two'] = rand(6)+1
ses[:die_two].set( msg,ses['true_die_two'])
end
if ses[:die_three_check].data() != true
ses['true_die_three'] = rand(6)+1
ses[:die_three].set( msg,ses['true_die_three'])
end
if ses[:die_four_check].data() != true
ses['true_die_four'] = rand(6)+1
ses[:die_four].set( msg,ses['true_die_four'])
end
if ses[:die_five_check].data() != true
ses['true_die_five'] = rand(6)+1
ses[:die_five].set( msg,ses['true_die_five'])
end
end
ses['true_roll_times']+=1
#Makes the roll button re-clickable
if ses['true_roll_times'] &lt; 3
ses[:roll].set( msg, 0)
end
return true
end
#BELOW THIS ARE ALGO'S FOR fiver SCORING LOGIC
def submit_ones(msg,value)
ones = 0
ses = get_ses(msg)
if ses['true_roll_times'] != 0
if ses['true_die_one'] == 1
ones += ses['true_die_one']
end
if ses['true_die_two'] == 1
ones += ses['true_die_two']
end
if ses['true_die_three'] == 1
ones += ses['true_die_three']
end
if ses['true_die_four'] == 1
ones += ses['true_die_four']
end
if ses['true_die_five'] == 1
ones += ses['true_die_five']
end
reset_keeps(msg)
reset_dice(msg)
update_upper_score(msg,ones)
ses[:ones].set(msg,ones)
else
ses[:submit_ones].set( msg, 0)
end
end
def submit_twos(msg,value)
twos = 0
ses = get_ses(msg)
if ses['true_roll_times'] != 0
if ses['true_die_one'] == 2
twos += ses['true_die_one']
end
if ses['true_die_two'] == 2
twos += ses['true_die_two']
end
if ses['true_die_three'] == 2
twos += ses['true_die_three']
end
if ses['true_die_four'] == 2
twos += ses['true_die_four']
end
if ses['true_die_five'] == 2
twos += ses['true_die_five']
end
reset_keeps(msg)
reset_dice(msg)
update_upper_score(msg,twos)
ses[:twos].set(msg,twos)
else
ses[:submit_twos].set( msg, 0)
end
end
def submit_threes(msg,value)
threes = 0
ses = get_ses(msg)
if ses['true_roll_times'] != 0
if ses['true_die_one'] == 3
threes += ses['true_die_one']
end
if ses['true_die_two'] == 3
threes += ses['true_die_two']
end
if ses['true_die_three'] == 3
threes += ses['true_die_three']
end
if ses['true_die_four'] == 3
threes += ses['true_die_four']
end
if ses['true_die_five'] == 3
threes += ses['true_die_five']
end
reset_keeps(msg)
reset_dice(msg)
update_upper_score(msg,threes)
ses[:threes].set(msg,threes)
else
ses[:submit_threes].set( msg, 0)
end
end
def submit_fours(msg,value)
fours = 0
ses = get_ses(msg)
if ses['true_roll_times'] != 0
if ses['true_die_one'] == 4
fours += ses['true_die_one']
end
if ses['true_die_two'] == 4
fours += ses['true_die_two']
end
if ses['true_die_three'] == 4
fours += ses['true_die_three']
end
if ses['true_die_four'] == 4
fours += ses['true_die_four']
end
if ses['true_die_five'] == 4
fours += ses['true_die_five']
end
reset_keeps(msg)
reset_dice(msg)
update_upper_score(msg,fours)
ses[:fours].set(msg,fours)
else
ses[:submit_fours].set( msg, 0)
end
end
def submit_fives(msg,value)
fives = 0
ses = get_ses(msg)
if ses['true_roll_times'] != 0
if ses['true_die_one'] == 5
fives += ses['true_die_one']
end
if ses['true_die_two'] == 5
fives += ses['true_die_two']
end
if ses['true_die_three'] == 5
fives += ses['true_die_three']
end
if ses['true_die_four'] == 5
fives += ses['true_die_four']
end
if ses['true_die_five'] == 5
fives += ses['true_die_five']
end
reset_keeps(msg)
reset_dice(msg)
update_upper_score(msg,fives)
ses[:fives].set(msg,fives)
else
ses[:submit_fives].set( msg, 0)
end
end
def submit_sixes(msg,value)
sixes = 0
ses = get_ses(msg)
if ses['true_roll_times'] != 0
if ses['true_die_one'] == 6
sixes += ses['true_die_one']
end
if ses['true_die_two'] == 6
sixes += ses['true_die_two']
end
if ses['true_die_three'] == 6
sixes += ses['true_die_three']
end
if ses['true_die_four'] == 6
sixes += ses['true_die_four']
end
if ses['true_die_five'] == 6
sixes += ses['true_die_five']
end
reset_keeps(msg)
reset_dice(msg)
update_upper_score(msg,sixes)
ses[:sixes].set(msg,sixes)
else
ses[:submit_sixes].set( msg, 0)
end
end
def submit_pair(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
pair = 0
pair_array = []
pair_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three'] &lt;&lt;
ses['true_die_four'] &lt;&lt; ses['true_die_five']
pair = pair_array.count(1) &gt;= 2 ? 2 : 0
pair = pair_array.count(2) &gt;= 2 ? 4 : pair != 0 ? pair : 0
pair = pair_array.count(3) &gt;= 2 ? 6 : pair != 0 ? pair : 0
pair = pair_array.count(4) &gt;= 2 ? 8 : pair != 0 ? pair : 0
pair = pair_array.count(5) &gt;= 2 ? 10 : pair != 0 ? pair : 0
pair = pair_array.count(6) &gt;= 2 ? 12 : pair != 0 ? pair : 0
update_lower_score(msg,pair)
reset_keeps(msg)
reset_dice(msg)
ses[:pair].set(msg,pair)
else
ses[:submit_pair].set( msg, 0)
end
end
def submit_two_pairs(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
two_pairs = 0
pair_one = 0
pair_two = 0
two_pairs_array = []
two_pairs_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three']
&lt;&lt; ses['true_die_four'] &lt;&lt; ses['true_die_five']
pair_one = two_pairs_array.count(1) &gt;= 2 ? 2 : 0
pair_one = two_pairs_array.count(2) &gt;= 2 ? 4 : pair_one != 0 ? pair_one : 0
pair_one = two_pairs_array.count(3) &gt;= 2 ? 6 : pair_one != 0 ? pair_one : 0
pair_one = two_pairs_array.count(4) &gt;= 2 ? 8 : pair_one != 0 ? pair_one : 0
pair_one = two_pairs_array.count(5) &gt;= 2 ? 10 : pair_one != 0 ? pair_one : 0
pair_one = two_pairs_array.count(6) &gt;= 2 ? 12 : pair_one != 0 ? pair_one : 0
pair_two = two_pairs_array.count(1) &gt;= 2 ? pair_one != 2 ? 2 : 0 : 0
pair_two = two_pairs_array.count(2) &gt;= 2 ? pair_one != 4 ? 4 : pair_two != 0 ?
pair_two : 0 : pair_two != 0 ? pair_two : 0
pair_two = two_pairs_array.count(3) &gt;= 2 ? pair_one != 6 ? 6 : pair_two != 0 ?
pair_two : 0 : pair_two != 0 ? pair_two : 0
pair_two = two_pairs_array.count(4) &gt;= 2 ? pair_one != 8 ? 8 : pair_two != 0 ?
pair_two : 0 : pair_two != 0 ? pair_two : 0
pair_two = two_pairs_array.count(5) &gt;= 2 ? pair_one != 10 ? 10 : pair_two != 0 ?
pair_two : 0 : pair_two != 0 ? pair_two : 0
#pair_two can't be six because pairs have to be different
if (pair_one != 0) &amp;&amp; (pair_two !=0)
two_pairs = pair_one + pair_two
end
update_lower_score(msg,two_pairs)
reset_keeps(msg)
reset_dice(msg)
ses[:two_pairs].set(msg,two_pairs)
else
ses[:submit_two_pairs].set( msg, 0)
end
end
def submit_three_of_a_kind(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
toak = 0
toak_array = []
toak_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three'] &lt;&lt;
ses['true_die_four'] &lt;&lt; ses['true_die_five']
if toak_array.count(6) &gt;= 3
toak = 18
elsif toak_array.count(5) &gt;= 3
toak = 15
elsif toak_array.count(4) &gt;= 3
toak = 12
elsif toak_array.count(3) &gt;= 3
toak = 9
elsif toak_array.count(2) &gt;= 3
toak = 6
elsif toak_array.count(1) &gt;= 3
toak = 3
else
toak = 0
end
update_lower_score(msg,toak)
reset_keeps(msg)
reset_dice(msg)
ses[:three_of_a_kind].set(msg,toak)
else
ses[:submit_three_of_a_kind].set( msg, 0)
end
end
def submit_four_of_a_kind(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
foak = 0
foak_array = []
foak_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three'] &lt;&lt;
ses['true_die_four'] &lt;&lt; ses['true_die_five']
if foak_array.count(6) &gt;= 4
foak = 24
elsif foak_array.count(5) &gt;= 4
foak = 20
elsif foak_array.count(4) &gt;= 4
foak = 16
elsif foak_array.count(3) &gt;= 4
foak = 12
elsif foak_array.count(2) &gt;= 4
foak = 8
elsif foak_array.count(1) &gt;= 4
foak = 4
else
foak = 0
end
update_lower_score(msg,foak)
reset_keeps(msg)
reset_dice(msg)
ses[:four_of_a_kind].set(msg,foak)
else
ses[:submit_four_of_a_kind].set( msg, 0)
end
end
def submit_full_house(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
full_house = 0
full_house_array = []
f_h_three = 0
f_h_pair = 0
full_house_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three']
&lt;&lt; ses['true_die_four'] &lt;&lt; ses['true_die_five']
if full_house_array.count(6) == 3
f_h_three = 18
elsif full_house_array.count(5) == 3
f_h_three = 15
elsif full_house_array.count(4) == 3
f_h_three = 12
elsif full_house_array.count(3) == 3
f_h_three = 9
elsif full_house_array.count(2) == 3
f_h_three = 6
elsif full_house_array.count(1) == 3
f_h_three = 3
else
f_h_three = 0
end
if full_house_array.count(6) == 2
f_h_two = 12
elsif full_house_array.count(5) == 2
f_h_two = 10
elsif full_house_array.count(4) == 2
f_h_two = 8
elsif full_house_array.count(3) == 2
f_h_two = 6
elsif full_house_array.count(2) == 2
f_h_two = 4
elsif full_house_array.count(1) == 2
f_h_two = 2
else
f_h_two = 0
end
if (f_h_three != 0)&amp;&amp;(f_h_two != 0)
full_house = f_h_three + f_h_two
else
full_house = 0
end
update_lower_score(msg,full_house)
reset_keeps(msg)
reset_dice(msg)
ses[:full_house].set(msg,full_house)
else
ses[:submit_full_house].set( msg, 0)
end
end
def submit_s_straight(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
s_straight = 0
s_straight_array = []
s_straight_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three']
&lt;&lt; ses['true_die_four'] &lt;&lt; ses['true_die_five']
if (s_straight_array.count(1) == 1)&amp;&amp;(s_straight_array.count(2) ==
1)&amp;&amp;(s_straight_array.count(3) == 1)&amp;&amp;(s_straight_array.count(4) ==
1)&amp;&amp;(s_straight_array.count(5) == 1)
s_straight = 20
end
update_lower_score(msg,s_straight)
reset_keeps(msg)
reset_dice(msg)
ses[:s_straight].set(msg,s_straight)
else
ses[:submit_s_straight].set( msg, 0)
end
end
def submit_l_straight(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
l_straight = 0
l_straight_array = []
l_straight_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three']
&lt;&lt; ses['true_die_four'] &lt;&lt; ses['true_die_five']
if (l_straight_array.count(2) == 1)&amp;&amp;(l_straight_array.count(3) ==
1)&amp;&amp;(l_straight_array.count(4) == 1)&amp;&amp;(l_straight_array.count(5) ==
1)&amp;&amp;(l_straight_array.count(6) == 1)
l_straight = 25
end
update_lower_score(msg,l_straight)
reset_keeps(msg)
reset_dice(msg)
ses[:l_straight].set(msg,l_straight)
else
ses[:submit_l_straight].set( msg, 0)
end
end
def submit_fiver(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
fiver = 0
fiver_array = []
fiver_array &lt;&lt; ses['true_die_one'] &lt;&lt; ses['true_die_two'] &lt;&lt; ses['true_die_three'] &lt;&lt;
ses['true_die_four'] &lt;&lt; ses['true_die_five']
if (fiver_array.count(1) == 5)||(fiver_array.count(2) == 5)||(fiver_array.count(3) ==
5)||(fiver_array.count(4) == 5)||(fiver_array.count(5) == 5) || (fiver_array.count(6) == 5)
fiver = 50
end
update_lower_score(msg,fiver)
reset_keeps(msg)
reset_dice(msg)
ses[:fiver].set(msg,fiver)
else
ses[:submit_fiver].set( msg, 0)
end
end
def submit_chance(msg,value)
ses = get_ses(msg)
if ses['true_roll_times'] != 0
chance = ses['true_die_one'] + ses['true_die_two'] + ses['true_die_three'] +
ses['true_die_four'] + ses['true_die_five']
reset_keeps(msg)
reset_dice(msg)
update_lower_score(msg,chance)
ses[:chance].set(msg,chance)
else
ses[:submit_chance].set( msg, 0)
end
end
end
</pre>
</div></div>

  <div class="navbar">
    <div class="arrow bottom left"><a href="#"><img src="/static/lefttext.png" height="20" alt=""></a></div>
    <div class="arrow bottom right"><a href="#"><img src="/static/righttext.png" height="20" alt=""></a></div>
  </div>
</div>

